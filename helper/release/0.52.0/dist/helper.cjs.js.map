{"version":3,"file":"helper.cjs.js","sources":["../src/groups.ts","../src/GroupManager.ts","../src/index.cjs.ts"],"sourcesContent":["import { isArray, deepFlat, find } from \"@daybrush/utils\";\nimport { GroupChild, TargetGroupsObject, TargetGroupsType } from \"./types\";\n\nexport class Child {\n    public type: \"group\" | \"root\" | \"single\" = \"single\";\n    public depth = 0;\n    protected _scope: string[] = [];\n    constructor(public parent?: ArrayChild) {\n        if (parent) {\n            this.depth = parent.depth + 1;\n        }\n    }\n\n    public get scope(): string[] {\n        const parent = this.parent;\n\n        if (!parent || parent.type === \"root\") {\n            return [];\n        }\n        return [...parent.scope, parent.id];\n    }\n}\n\nexport class SingleChild extends Child {\n    public type = \"single\" as const;\n    public isGroupElement = false;\n    constructor(parent: ArrayChild, public value: HTMLElement | SVGElement) {\n        super(parent);\n    }\n}\n\n\nexport class ArrayChild extends Child {\n    public type: \"group\" | \"root\" = \"group\";\n    public value: GroupChild[] = [];\n    public id = \"\";\n    public groupElement?: HTMLElement | SVGElement | null = null;\n    public map: Map<HTMLElement | SVGElement, SingleChild> = new Map();\n\n    public compare(groups: TargetGroupsType, checker: -1 | 0 | 1 = 0) {\n        const elements = deepFlat(groups);\n        const map = this.map;\n        const elementsLength = elements.length;\n        const mapSize = map.size;\n        const sizeDiff = mapSize - elementsLength;\n\n        // 1 this > groups\n        // 0 this = groups\n        // -1 this < groups\n        const count = elements.filter(element => map.has(element)).length;\n\n        if ((checker > 0 && sizeDiff >= 0) || (checker === 0 && sizeDiff === 0)) {\n            return elementsLength === count;\n        } else if (checker < 0 && sizeDiff <= 0) {\n            return mapSize === count;\n        }\n        return false;\n    }\n    public has(target: HTMLElement | SVGElement) {\n        return this.map.has(target);\n    }\n    public contains(element: HTMLElement | SVGElement): boolean {\n        if (this.has(element)) {\n            return true;\n        }\n        return this.value.some(child => {\n            if (child.type === \"group\") {\n                return child.contains(element);\n            } else {\n                return false;\n            }\n        });\n    }\n    public findContainedChild(element: HTMLElement | SVGElement) {\n        return find(this.value, child => {\n            if (child.type === \"single\") {\n                return child.value === element;\n            } else {\n                return child.contains(element);\n            }\n        });\n    }\n    /**\n     * Exact group containing targets\n     */\n    public findExactChild(target: TargetGroupsType[0]): GroupChild | undefined {\n        const map = this.map;\n\n        if (!isArray(target)) {\n            return map.get(target);\n        }\n        const flatted = deepFlat(target);\n        const length = flatted.length;\n        const single = map.get(flatted[0]);\n\n        if (!single) {\n            return;\n        }\n\n        let parent: ArrayChild | undefined = single.parent;\n\n        while (parent) {\n            if (parent.map.size >= length) {\n                return parent;\n            }\n            parent = parent.parent;\n        }\n        return;\n    }\n    public findCommonParent(targets: TargetGroupsType): ArrayChild {\n        let depth = Infinity;\n        let childs = targets.map(target => this.findExactChild(target));\n\n        childs.forEach(child => {\n            if (!child) {\n                return;\n            }\n            depth = Math.min(child.depth, depth);\n        });\n\n        while (depth) {\n            --depth;\n            childs = childs.map(child => {\n                let parent: GroupChild | undefined = child;\n\n                while (parent && parent.depth !== depth) {\n                    parent = parent.parent;\n                }\n\n                return parent;\n            });\n            const firstChild = childs.find(child => child);\n\n            if (!firstChild) {\n                return this;\n            }\n            if (childs.every(child => !child || child === firstChild)) {\n                break;\n            }\n        }\n        const commonParent = childs.find(child => child) as ArrayChild;\n\n        return commonParent || this;\n    }\n    public findNextChild(\n        target: HTMLElement | SVGElement,\n        range: TargetGroupsType = this.toTargetGroups(),\n        isExact = true,\n    ): ArrayChild | null {\n        let nextChild: ArrayChild | null = null;\n\n        const length = range.length;\n\n        range.some(child => {\n            if (!isExact && length === 1 && isArray(child)) {\n                nextChild = this.findNextChild(target, child);\n                return nextChild;\n            }\n\n\n            const nextGroupChild = this.findExactChild(child);\n\n            if (!nextGroupChild) {\n                return;\n            }\n\n            if (\"map\" in nextGroupChild) {\n                if (nextGroupChild.map.has(target)) {\n                    nextChild = nextGroupChild;\n                    return true;\n                }\n            }\n        });\n\n        return nextChild;\n    }\n    public findNextExactChild(\n        target: HTMLElement | SVGElement,\n        selected: Array<HTMLElement | SVGElement>,\n        range: TargetGroupsType = this.toTargetGroups(),\n    ): ArrayChild | null {\n        // [[1, 2]] => group([1, 2]) exact\n        // [[[1, 2], 3]] => group([1, 2])\n        const nextChild = this.findNextChild(target, range, true);\n\n        if (!nextChild) {\n            return null;\n        }\n\n        if (nextChild.compare(selected, -1)) {\n            return nextChild;\n        }\n        return null;\n    }\n    /**\n     * Finds a group that does not overlap within the range and includes the target.\n     */\n    public findPureChild(\n        target: HTMLElement | SVGElement,\n        range: Array<HTMLElement | SVGElement>,\n    ): ArrayChild | null {\n        let nextGroupChild: ArrayChild | null = null;\n\n        const childSelected = range.filter(element => this.has(element));\n\n        if (!childSelected.length) {\n            return this;\n        }\n\n        this.value.some(nextChild => {\n            if (nextChild.type !== \"single\" && nextChild.has(target)) {\n                nextGroupChild = nextChild.findPureChild(target, childSelected);\n\n                if (nextGroupChild) {\n                    return true;\n                }\n            }\n        });\n\n        return nextGroupChild;\n    }\n    public findNextPureChild(\n        target: HTMLElement | SVGElement,\n        range: Array<HTMLElement | SVGElement>,\n    ): ArrayChild | null {\n        const nextChild = this.findNextChild(target);\n\n        if (nextChild) {\n            return nextChild.findPureChild(target, range);\n        }\n        return null;\n    }\n    public getSingleChild(): SingleChild | null {\n        const groupElement = this.groupElement;\n\n        if (groupElement) {\n            const singleChild = this.parent?.value.find(t => t.value === groupElement);\n\n            if (singleChild) {\n                return singleChild as SingleChild;\n            }\n        }\n        return null;\n    }\n    public toTargetGroups(): TargetGroupsType {\n        return this.value.map(child => {\n            if (child.type === \"single\") {\n                return child.value;\n            } else {\n                return child.toTargetGroups();\n            }\n        });\n    }\n    public findArrayChild(targets: TargetGroupsType): ArrayChild | null {\n        const {\n            value,\n        } = this;\n\n        let result = false;\n\n        if (this.type !== \"root\") {\n            result = value.every(child => {\n                if (child.type === \"single\")  {\n                    return targets.some(target => child.value === target);\n                } else {\n                    return targets.some(target => {\n                        return isArray(target) && child.findArrayChild(target);\n                    });\n                }\n            });\n            // result = targets.every(target => {\n            //     if (isArray(target)) {\n            //         return value.some(child => {\n            //             return child.type === \"group\" && child.findArrayChild(target);\n            //         });\n            //     } else {\n            //         return map.get(target);\n            //     }\n            // });\n        }\n\n        if (result && targets.length === value.length) {\n            return this;\n        } else {\n            let childResult: ArrayChild | null = null;\n\n            value.some(child => {\n                if (child.type === \"group\") {\n                    childResult = child.findArrayChild(targets);\n\n                    return childResult;\n                }\n            });\n\n            return childResult;\n        }\n    }\n    public groupByPerfect(selected: Array<HTMLElement | SVGElement>) {\n        return this.value.filter(child => {\n            if (child.type !== \"single\") {\n                return child.compare(selected, -1);\n            }\n            return selected.indexOf(child.value) > -1;\n        }).map(child => {\n            if (child.type !== \"single\") {\n                const singleChild = child.getSingleChild();\n\n                if (singleChild) {\n                    return singleChild;\n                }\n            }\n            return child;\n        });\n    }\n    public add(targets: TargetGroupsObject) {\n        const {\n            value,\n            map,\n        } = this;\n\n        targets.forEach(child => {\n            if (\"groupId\" in child) {\n                const group = new ArrayChild(this);\n\n                group.id = child.groupId;\n                value.push(group);\n                group.add(child.children);\n            } else if (isArray(child)) {\n                const group = new ArrayChild(this);\n\n                value.push(group);\n                group.add(child);\n            } else {\n                const element = \"current\" in child ? child.current : child;\n                const single = new SingleChild(this, element!);\n\n                value.push(single);\n                map.set(element!, single);\n            }\n        });\n\n        value.forEach(child => {\n            if (child.type === \"single\") {\n                map.set(child.value, child);\n            } else {\n                child.map.forEach((nextChild, element) => {\n                    map.set(element, nextChild);\n                });\n            }\n        });\n\n        value.forEach(child => {\n            if  (child.type !== \"single\") {\n                return;\n            }\n            // single\n            const singleElement = child.value;\n            const groupChild = value.find(child2 => {\n                if (child2.type === \"single\") {\n                    return;\n                }\n                const firstElement = [...child2.map.keys()][0];\n\n                if (!firstElement) {\n                    return;\n                }\n\n                return singleElement.contains(firstElement);\n            });\n\n            (child as SingleChild).isGroupElement = !!groupChild;\n\n            if (groupChild) {\n                (groupChild as ArrayChild).groupElement = child.value;\n            }\n        });\n        return parent;\n    }\n}\n","/* eslint-disable no-cond-assign */\nimport { deepFlat, isArray } from \"@daybrush/utils\";\nimport { ArrayChild, SingleChild } from \"./groups\";\nimport { GroupChild, TargetGroupsObject, TargetGroupsType, TargetList } from \"./types\";\n\n\nexport function toTargetList(raw: GroupChild[]): TargetList {\n    function targets(childs: GroupChild[] = []) {\n        const arr: TargetGroupsType = [];\n\n        childs.forEach((child) => {\n            if (child.type === \"single\") {\n                arr.push(child.value);\n            } else {\n                arr.push(targets(child.value));\n            }\n        });\n\n        return arr;\n    }\n\n    return {\n        raw: () => raw,\n        targets() {\n            return targets(this.raw());\n        },\n        flatten() {\n            return deepFlat(this.targets());\n        },\n    };\n}\n\nexport class GroupManager extends ArrayChild {\n    public type = \"root\" as const;\n    private _targets:  Array<HTMLElement | SVGElement> = [];\n\n    constructor(\n        targetGroups: TargetGroupsType,\n        targets?: Array<HTMLElement | SVGElement>,\n    ) {\n        super();\n        this.set(targetGroups, targets);\n    }\n    public set(\n        targetGroups: TargetGroupsObject,\n        targets: Array<HTMLElement | SVGElement> = [],\n    ) {\n        this.map = new Map();\n        this.value = [];\n\n        const map = this.map;\n        const value = this.value;\n\n        this.add(targetGroups);\n        targets.forEach(target => {\n            if (map.has(target)) {\n                return;\n            }\n            const single = new SingleChild(this, target);\n\n            single.depth = 1;\n            value.push(single);\n            map.set(target, single);\n        });\n        this._targets = targets;\n    }\n    public selectSubChilds(targets: TargetGroupsType, target: HTMLElement | SVGElement) {\n        const root = this;\n        const nextChild = root.findNextChild(target, targets, false);\n        const targetChild = root.map.get(target);\n\n        let nextChilds: GroupChild[] = [];\n\n        if (nextChild) {\n            nextChilds = [nextChild];\n        } else if (targetChild) {\n            nextChilds = [targetChild];\n        } else {\n            nextChilds = [];\n        }\n\n        return toTargetList(nextChilds);\n    }\n    public selectSingleChilds(\n        targets: TargetGroupsType,\n        added: Array<HTMLElement | SVGElement>,\n        removed: Array<HTMLElement | SVGElement>,\n    ) {\n        const nextTargets = [...targets];\n\n        // group can't be added, removed.\n        removed.forEach(element => {\n            const index = nextTargets.indexOf(element);\n\n            if (index > -1) {\n                nextTargets.splice(index, 1);\n            }\n        });\n\n        // Targets can be added one by one\n        added.forEach(element => {\n            nextTargets.push(element);\n        });\n\n        return toTargetList(this.toChilds(nextTargets));\n    }\n    public selectCompletedChilds(\n        targets: TargetGroupsType,\n        added: Array<HTMLElement | SVGElement>,\n        removed: Array<HTMLElement | SVGElement>,\n        continueSelect?: boolean,\n    ) {\n        const nextTargets = [...targets];\n        const startSelected = deepFlat(nextTargets);\n\n        // group can be added, removed.\n        removed.forEach(element => {\n            // Single Target\n            const index = nextTargets.indexOf(element);\n\n            if (index > -1) {\n                // single target or group\n                nextTargets.splice(index, 1);\n                return;\n            }\n            // Group Target\n            const removedChild = continueSelect\n                // Finds the nearest child for element and nextTargets.\n                ? this.findNextChild(element, nextTargets)\n                // Find the nearest exact child for element, all removed and nextTargets.\n                : this.findNextExactChild(element, removed, nextTargets);\n\n            if (removedChild) {\n                const groupIndex = nextTargets.findIndex(target => {\n                    return isArray(target) && removedChild.compare(target);\n                });\n\n                if (groupIndex > -1) {\n                    nextTargets.splice(groupIndex, 1);\n                }\n            }\n        });\n\n        added.forEach(element => {\n            const parentGroup = this._findParentGroup(element, startSelected);\n            const nextChild = parentGroup.findContainedChild(element);\n\n            if (nextChild?.type === \"group\") {\n                const singleChild = nextChild.getSingleChild();\n\n                if (singleChild) {\n                    nextTargets.push(singleChild.value);\n                } else {\n                    nextTargets.push(nextChild.toTargetGroups());\n                }\n                return;\n            }\n            nextTargets.push(element);\n        });\n        return toTargetList(this.toChilds(nextTargets));\n    }\n    public selectSameDepthChilds(\n        targets: TargetGroupsType,\n        added: Array<HTMLElement | SVGElement>,\n        removed: Array<HTMLElement | SVGElement>,\n        continueSelect?: boolean,\n    ) {\n        const nextTargets = [...targets];\n        const commonParent = this.findCommonParent(nextTargets);\n\n        removed.forEach(element => {\n            // Single Target\n            const index = nextTargets.indexOf(element);\n\n            if (index > -1) {\n                // single target or group\n                nextTargets.splice(index, 1);\n                return;\n            }\n            const removedChild = continueSelect\n                // Find the nearest exact child for element, all removed and nextTargets.\n                ? commonParent.findNextExactChild(element, removed, nextTargets)\n                // Finds the nearest child for element and nextTargets.\n                : commonParent.findNextChild(element, nextTargets, true);\n\n            if (removedChild) {\n                const groupIndex = nextTargets.findIndex(target => {\n                    return isArray(target) && removedChild.compare(target);\n                });\n\n                if (groupIndex > -1) {\n                    nextTargets.splice(groupIndex, 1);\n                }\n            }\n        });\n        const addedChildren = commonParent.groupByPerfect(added);\n\n        addedChildren.forEach(child => {\n            if (child.type === \"single\") {\n                nextTargets.push(child.value);\n            } else {\n                const groupIndex = nextTargets.findIndex(target => {\n                    return isArray(target) && child.compare(target, 1);\n                });\n\n                if (groupIndex > -1) {\n                    nextTargets.splice(groupIndex, 1);\n                }\n                nextTargets.push(child.toTargetGroups());\n            }\n        });\n        return toTargetList(this.toChilds(nextTargets));\n    }\n    public toChilds(targets: TargetGroupsType): GroupChild[] {\n        const childs: GroupChild[] = [];\n\n        targets.forEach(target => {\n            if (isArray(target)) {\n                const arrayChild = this.findArrayChild(target);\n\n                if (arrayChild) {\n                    const singleChild = arrayChild.getSingleChild();\n\n                    if (singleChild) {\n                        return singleChild;\n                    }\n                    childs.push(arrayChild);\n                }\n            } else {\n                const single = this.map.get(target);\n\n                if (single) {\n                    childs.push(single);\n                } else {\n                    childs.push(new SingleChild(this, target));\n                }\n            }\n        });\n\n        return childs;\n    }\n    public findChild(element: HTMLElement | SVGElement, isAuto: true): SingleChild | ArrayChild;\n    public findChild(\n        element: HTMLElement | SVGElement,\n        isAuto?: boolean,\n    ): SingleChild | ArrayChild | undefined;\n    public findChild(\n        element: HTMLElement | SVGElement,\n        isAuto?: boolean,\n    ): SingleChild | ArrayChild | undefined {\n        const value = this.map.get(element);\n\n        if (isAuto) {\n            return value || new SingleChild(this, element);\n        }\n        return value;\n    }\n    public findArrayChildById(id: string): ArrayChild | null {\n        let value: ArrayChild | null = null;\n\n        this.value.some(function find(child: GroupChild) {\n            if (child.type !== \"single\") {\n                if (child.id === id) {\n                    value = child;\n                    return true;\n                } else {\n                    return child.value.some(find);\n                }\n            }\n        });\n\n        return value;\n    }\n    public group(targets: TargetGroupsType, flatten?: boolean): TargetGroupsType | null {\n        const commonParent = this.findCommonParent(targets);\n        const groupChilds = targets.map(target => {\n            if (isArray(target)) {\n                return this.findArrayChild(target);\n            }\n            return this.findChild(target);\n        });\n        const isGroupable = groupChilds.every(child => child?.parent === commonParent);\n\n        if (!isGroupable) {\n            return null;\n        }\n        const group = new ArrayChild(commonParent);\n        const nextChilds = commonParent.value.filter(target => groupChilds.indexOf(target) === -1);\n\n        if (!nextChilds.length) {\n            return null;\n        }\n        nextChilds.unshift(group);\n        group.add(flatten ? deepFlat(targets) : targets);\n        commonParent.value = nextChilds;\n\n        this.set(this.toTargetGroups(), this._targets);\n\n        return group.toTargetGroups();\n    }\n    public ungroup(targets: TargetGroupsType) {\n        if (targets.length === 1 && isArray(targets[0])) {\n            targets = targets[0];\n        }\n        const commonParent = this.findCommonParent(targets);\n        const groupChilds = targets.map(target => {\n            if (isArray(target)) {\n                return this.findArrayChild(target);\n            }\n            return this.findChild(target);\n        });\n\n        if (commonParent.groupElement) {\n            return null;\n        }\n\n        // all children is targets\n        const isGroupable = commonParent.value.every(child => groupChilds.indexOf(child) > -1);\n\n        if (!isGroupable || commonParent === this) {\n            // has no group\n            return null;\n        }\n\n        const parent = commonParent.parent;\n\n        if (!parent) {\n            return null;\n        }\n        const nextChilds = parent.value.filter(target => target !== commonParent);\n\n        nextChilds.push(...commonParent.value);\n        parent.value = nextChilds;\n\n        this.set(this.toTargetGroups(), this._targets);\n        return commonParent.toTargetGroups();\n    }\n    protected _findParentGroup(\n        element: HTMLElement | SVGElement,\n        range: Array<HTMLElement | SVGElement>,\n    ) {\n        if (!range.length) {\n            return this;\n        }\n        const single = this.map.get(element);\n\n        if (!single) {\n            return this;\n        }\n        let parent: ArrayChild | undefined = single.parent;\n\n        while (parent) {\n            if (range.some(element => parent!.contains(element))) {\n                return parent;\n            }\n            parent = parent.parent;\n        }\n        return this;\n    }\n}\n","import * as modules from \"./index\";\n\n\nmodule.exports = modules;\nexport * from \"./index\";\nexport default modules;\n"],"names":["deepFlat","find","isArray"],"mappings":"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"}